{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","OnSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAYeA,EAXH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACxB,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACA,4BAAKF,GACL,2BAAIC,MCaSK,EAlBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAClB,OACA,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAQ,kBAAC,EAAD,CACdC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCILW,EAbE,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACC,yBAAKX,UAAW,OAChB,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTAP,EAAS,CACpB,CACEL,GAAI,GACJF,KAAM,OACNkB,SAAU,OACVjB,MAAO,qBAET,CACEC,GAAI,GACJF,KAAM,SACNkB,SAAU,YACVjB,MAAO,oBAET,CACEC,GAAI,GACJF,KAAM,gBACNkB,SAAU,WACVjB,MAAO,yBAET,CACEC,GAAI,GACJF,KAAM,OACNkB,SAAU,UACVjB,MAAO,6BAET,CACEC,GAAI,GACJF,KAAM,YACNkB,SAAU,SACVjB,MAAO,uBAET,CACEC,GAAI,GACJF,KAAM,QACNkB,SAAU,mBACVjB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,WACNkB,SAAU,eACVjB,MAAO,iBAET,CACEC,GAAI,EACJF,KAAM,YACNkB,SAAU,gBACVjB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,UACNkB,SAAU,WACVjB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,WACNkB,SAAU,iBACVjB,MAAO,2BCjDIkB,EATD,SAACC,GAEZ,OACC,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,WCmCIC,G,wDAhCd,aAAc,IAAD,8BACZ,gBAMAC,eAAe,SAACC,GACX,EAAKC,SAAS,CAAChB,YAAYe,EAAME,OAAOC,SAN7C,EAAKC,MAAM,CACVzB,OAAOA,EACDM,YAAY,IAJP,E,qDAWH,IAAD,OACHoB,EAAgBC,KAAKF,MAAMzB,OAAO4B,QAAO,SAAA5B,GAC5C,OAAOA,EAAOP,KAAKoC,cAAcC,SAAS,EAAKL,MAAMnB,YAAYuB,kBAEpE,OAA8B,IAA3BF,KAAKF,MAAMzB,OAAO+B,OACd,uCAGN,yBAAKnC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcoB,KAAKP,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAS0B,U,GAxBLM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OAEHC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.00ea38f5.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card =({name,email,id})=>{\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${id}?200*200`}/>\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList =({ robots }) =>{\r\n return (\r\n\t<div>\r\n    {\r\n     robots.map((user,i) =>{\r\n         return (<Card\r\n\t\t key={i} \r\n\t\t id={robots[i].id}\r\n\t\t name={robots[i].name} \r\n\t\t email={robots[i].email} \r\n\t\t  />\r\n\t\t  );\r\n\t})\r\n    }\r\n   </div>\r\n);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<div className ='pa2'>\r\n\t\t<input\r\n\t\t className='pa3 ba b--green bg-lightest-blue'\r\n\t\t type='search' \r\n\t\t placeholder='search robots'\r\n\t\t onChange={searchChange}\r\n\t/>\r\n</div>\r\n);\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n  {\r\n    id: 43,\r\n    name: 'Siva',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 65,\r\n    name: 'rilwan',\r\n    username: 'Antonette',\r\n    email: 'rillu@melissa.tv'\r\n  },\r\n  {\r\n    id: 90,\r\n    name: 'vengadanathan',\r\n    username: 'Samantha',\r\n    email: 'elumalaiiyarponnu.net'\r\n  },\r\n  {\r\n    id: 73,\r\n    name: 'moni',\r\n    username: 'ghjdbUI',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 54,\r\n    name: 'Meenakshi',\r\n    username: 'Kamren',\r\n    email: 'black_love@annie.ca'\r\n  },\r\n  {\r\n    id: 89,\r\n    name: 'ramya',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'ramya@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'jeisurya',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'jei@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'parthiban',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'selciya',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'priyanka',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\nconst Scroll =(props)=>{\r\n\r\n   return(\r\n   \t<div style={{overflowY:'scroll',border:'5px solid black',height:'500px'}}>\r\n   \t{props.children}\r\n   \t</div>\r\n   \t)\r\n}\r\n\r\nexport default Scroll;","import React,{ Component } from 'react'\r\nimport CardList from './CardList'\r\nimport SearchBox from './SearchBox'\r\nimport {robots} from './robots'\r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:robots,\r\n\t        searchfield:''\r\n\t\t}\r\n\t}\r\n  OnSearchChange=(event)=>{\r\n  \t    this.setState({searchfield:event.target.value})\r\n\r\n  }\r\n  render(){\r\n const filteredRobots =this.state.robots.filter(robots=>{\r\n  \t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n });\r\n if(this.state.robots.length===0){\r\n\treturn <h1>Loading</h1>\r\n}else\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={this.OnSearchChange} />\r\n\t\t<Scroll>\r\n\t\t  <CardList robots ={filteredRobots} />\r\n\t\t</Scroll>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n}\r\n\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n     <App/>\r\n</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}